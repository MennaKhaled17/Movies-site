<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Panel</title>
  <style>
   /* Reset some basic styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Ensure the body takes up the full height */
body, html {
  height: 100%;
  font-family: Arial, sans-serif;
}

/* Admin Panel Container */
.admin-panel {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f4f4f4;
  padding: 20px;
}

/* Admin Panel Header */
.admin-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 0;
  background-color: #ff5722; /* Orange color */
  color: white;
  border-radius: 8px;
}

/* Admin Navigation Links */
.admin-nav {
  margin: 10px 0;
  display: flex;
  gap: 10px;
}

.admin-nav a {
  text-decoration: none;
  padding: 10px 15px;
  color: white;
  background-color: #ff0000; /* Light orange */
  border-radius: 4px;
}

.admin-nav a:hover {
  background-color: #ff5722; /* Darker orange */
}

/* Search Form */
form {
  margin-bottom: 20px;
  position: relative;
}

#search-input {
  padding: 10px;
  
  border: 1px solid #ccc;
  border-radius: 4px;
}

#search-button {
  padding: 10px 20px;
  background-color:#ff0000;
  border: none;
  border-radius: 4px;
  color: white;
  cursor: pointer;
}

#search-button:hover {
  background-color: #ff5722;
}

/* Autocomplete List */
#autocomplete-list {
  position: absolute;
  z-index: 1000;
  background-color: white;
  border: 1px solid #ccc;
  max-height: 150px;
  overflow-y: auto;
  width: 250px;
  border-radius: 4px;
  margin-top: 2px;
}

#autocomplete-list li {
  padding: 10px;
  cursor: pointer;
}

#autocomplete-list li:hover {
  background-color: #fff8f8;
  border:20px;
}

/* Admin Content */
.admin-content {
  flex-grow: 1;
  overflow-y: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

thead {
  background-color: #ff9800;
  color: white;
}

th, td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

th {
  background-color: #ff5722;
}

td {
  background-color: #fff;
}

button {
  padding: 8px 12px;
  background-color:#ff0000;
  border: none;
  border-radius: 4px;
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: #ff5722;
}


  </style>
</head>
<body>
  <div class="admin-panel">
    <div class="admin-panel-header">
      <h1>Admin Panel</h1>
      <button onclick="location.href='/logout';">Logout</button>
    </div>
    <div class="admin-nav">
      <a href="/admin">Users</a>
      <a href="/">Home</a>  
    </div>
    <form action="/admin/search" method="GET">
      <input type="search" name="email" placeholder="Search by Email" id="search-input" autocomplete="off" />
      <ul id="autocomplete-list"></ul>
      <button id="search-button">Go</button>
    </form>
    <div class="admin-content">
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (users.length > 0) { %>
            <% users.forEach(userr => { %>
              <tr>
                <td><%= userr._id %></td> 
                <td><%= userr.firstname %></td>
                <td><%= userr.lastname %></td>
                <td><%= userr.email %></td>
                <td><%= userr.role %></td>
                <td>
                  <button onclick="return edit('<%= userr._id %>')">Edit</button>
                  <button onclick="return deactivateUser('<%= userr._id %>', this.parentNode.parentNode)">Delete</button>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="6">No users found for the searched email.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</body>
<script>
  // Function to edit user
  function edit(userId) {
    if (confirm("Are you sure you want to update this user?")) {
      const updatedUser = {
        firstname: document.getElementById(`firstname-${userId}`),
        lastname: document.getElementById(`lastname-${userId}`),
        country: document.getElementById(`country-${userId}`),
        phone: document.getElementById(`phone-${userId}`),
        email: document.getElementById(`email-${userId}`),
        password: document.getElementById(`password-${userId}`)
      };

      fetch(`/admin/update/${userId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedUser)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('User updated successfully.');
        } else {
          alert('Failed to update user.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred.');
      });
    }
  }

  // Function to deactivate user
  function deactivateUser(userId, row) {
    if (confirm("Are you sure you want to deactivate this user?")) {
      fetch(`/admin/deactivated/${userId}`, {
        method: 'PATCH'
      })
      .then(response => {
        if (response.ok) {
          alert('User has been deactivated.');
          row.style.display = 'none';
        } else {
          alert('Failed to deactivate user.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred.');
      });
    }
  }

  // Autocomplete feature
  // Selecting the search input and autocomplete list from the DOM
// Selecting the search input and autocomplete list from the DOM
document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-input');
      const autocompleteList = document.getElementById('autocomplete-list');
      const form = document.getElementById('search-form');

      searchInput.addEventListener('input', async () => {
        const query = searchInput.value;
        if (query.length < 3) {
          autocompleteList.innerHTML = '';
          return;
        }

        try {
          const response = await fetch(`/autocompletee?email=${encodeURIComponent(query)}`);
          const emails = await response.json();
          autocompleteList.innerHTML = '';

          emails.forEach(email => {
            const li = document.createElement('li');
            li.textContent = email;
            li.addEventListener('click', () => {
              searchInput.value = email;
              autocompleteList.innerHTML = '';
            
              fetch(`/admin?email=${encodeURIComponent(email)}`)
                .then(response => response.text())
                .then(html => {
                  document.getElementById('admin-content').innerHTML = html;
                })
                .catch(error => {
                  console.error('Error fetching search results:', error);
                });
            });
            autocompleteList.appendChild(li);
          });
        } catch (error) {
          console.error('Error fetching autocomplete suggestions:', error);
        }
      });

      document.addEventListener('click', (e) => {
        if (!autocompleteList.contains(e.target) && e.target !== searchInput) {
          autocompleteList.innerHTML = '';
        }
      });
    });


</script>
</html>
